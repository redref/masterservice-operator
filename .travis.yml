language: go
sudo: required
# We need the systemd for the kubeadm and it's default from 16.04+
dist: xenial
env:
  global:
    - CHANGE_MINIKUBE_NONE_USER=true
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - CHANGE_MINIKUBE_NONE_USER=true
    - KUBECONFIG=$HOME/.kube/config
    - KUBE_VERSION=v1.12.7
    - MINIKUBE_VERSION=v1.0.0
    - HELM_VERSION=v2.13.1
    - OPERATORSDK_VERSION=v0.7.0
    - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
    - JSONPATH_POD='{.metadata.name}:{range .status.conditions[*]}{@.type}={@.status};{end}'
    - JSONPATH_ENDPOINT='{range .subsets[*]}{range @.addresses[*]}{@.targetRef.name}{end}{end}'

before_install:
  - sudo apt-get update
  - sudo apt-get install -y socat

before_script:
# Download kubectl, which is a requirement for using minikube.
- curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubectl &&
  chmod +x kubectl && sudo mv kubectl /usr/local/bin/
# Download and start minikube.
- curl -Lo minikube https://storage.googleapis.com/minikube/releases/${MINIKUBE_VERSION}/minikube-linux-amd64 &&
  chmod +x minikube && sudo mv minikube /usr/local/bin/
- mkdir -p $HOME/.kube $HOME/.minikube
- touch $KUBECONFIG
- sudo minikube start --vm-driver=none --kubernetes-version=${KUBE_VERSION}
- "sudo chown -R travis: /home/travis/.minikube/"
- kubectl cluster-info
# Wait kube-addon-manager
- until kubectl -n kube-system get pods -lcomponent=kube-addon-manager -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
  sleep 1; echo "waiting for kube-addon-manager to be available"; kubectl get pods --all-namespaces; done
# Wait kube-dns
- until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
  sleep 1; echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done
# Download helm
- curl -Lo helm.tgz https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-amd64.tar.gz &&
  sudo tar -C /usr/local/bin -xvzf helm.tgz --strip=1 linux-amd64/helm && sudo chmod +x /usr/local/bin/helm
- helm init --history-max 10
# Wait tiller
- until kubectl -n kube-system get pods -lapp=helm -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
  sleep 1; echo "waiting for tiller to be available"; kubectl get pods --all-namespaces; done
# Download operator-sdk
- curl -Lo operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/${OPERATORSDK_VERSION}/operator-sdk-${OPERATORSDK_VERSION}-x86_64-linux-gnu &&
  chmod +x operator-sdk && sudo mv operator-sdk /usr/local/bin/
# Download redis-dictator (for testing)
- git clone https://github.com/Junonogis/redis-dictator

script:
- gofmt -d pkg cmd version
- operator-sdk build junonogis/masterservice-operator:$(git describe --tags)
- docker image list
- helm template -n masterservice-operator ./helm --set image.tag=$(git describe --tags),image.pullPolicy=Never
- helm install -n masterservice-operator ./helm --set image.tag=$(git describe --tags),image.pullPolicy=Never
# Wait for operator to be deployed
- until kubectl -n default get pods -lname=masterservice-operator -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
  sleep 1; echo "waiting for operator deployment to be available"; kubectl get pods -n default; done
# Deploy and test redis-dictator
- helm template -n redis-test redis-dictator/helm
- helm install -n redis-test redis-dictator/helm
- until kubectl -n default get pods redis-test-0 -o jsonpath="${JSONPATH_POD}" 2>&1 | grep -q "Ready=True"; do
  sleep 1; echo "waiting for redis to be available"; kubectl get pods -n default; done
# Check there has been an election and callback was called
- kubectl get endpoints redis-test -o yaml
- test $(kubectl get endpoints redis-test -o jsonpath="${JSONPATH_ENDPOINT}") == "redis-test-0"
- kubectl exec redis-test-0 -it redis-cli info | grep -q role:master
# Mix up things
- until kubectl -n default get pods redis-test-1 -o jsonpath="${JSONPATH_POD}" 2>&1 | grep -q "Ready=True"; do
  sleep 1; echo "waiting for redis to be available"; kubectl get pods -n default; done
- kubectl delete pod redis-test-0
- kubectl get endpoints redis-test -o yaml
- test $(kubectl get endpoints redis-test -o jsonpath="${JSONPATH_ENDPOINT}") == "redis-test-1"
- kubectl exec redis-test-1 -it redis-cli info | grep -q role:master

after_success:
# Push
- |
  set -e
  if [ $TRAVIS_PULL_REQUEST == false ] && [ $TRAVIS_BRANCH == "master" ]; then
    echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
    docker tag junonogis/masterservice-operator:$(git describe --tags) junonogis/masterservice-operator:latest
    docker push junonogis/masterservice-operator:latest
    docker push junonogis/masterservice-operator:$(git describe --tags)
  fi